{
  "_args": [
    [
      {
        "raw": "@angular-devkit/schematics@8.0.6",
        "scope": "@angular-devkit",
        "escapedName": "@angular-devkit%2fschematics",
        "name": "@angular-devkit/schematics",
        "rawSpec": "8.0.6",
        "spec": "8.0.6",
        "type": "version"
      },
      "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/@angular/cli"
    ]
  ],
  "_from": "@angular-devkit/schematics@8.0.6",
  "_hasShrinkwrap": false,
  "_id": "@angular-devkit/schematics@8.0.6",
  "_location": "/@angular-devkit/schematics",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/schematics_8.0.6_1561667902366_0.33740907383379426"
  },
  "_npmUser": {
    "name": "angular",
    "email": "devops+npm@angular.io"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@angular-devkit/schematics@8.0.6",
    "scope": "@angular-devkit",
    "escapedName": "@angular-devkit%2fschematics",
    "name": "@angular-devkit/schematics",
    "rawSpec": "8.0.6",
    "spec": "8.0.6",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular/cli",
    "/@schematics/angular",
    "/@schematics/update"
  ],
  "_resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-8.0.6.tgz",
  "_shasum": "e50805582f4a082079201dffd8940e001f3721e0",
  "_shrinkwrap": null,
  "_spec": "@angular-devkit/schematics@8.0.6",
  "_where": "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/@angular/cli",
  "author": {
    "name": "Angular Authors"
  },
  "bugs": {
    "url": "https://github.com/angular/angular-cli/issues"
  },
  "dependencies": {
    "@angular-devkit/core": "8.0.6",
    "rxjs": "6.4.0"
  },
  "description": "Angular Schematics - Library",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-FGPcVKxNvtdFB0A6oHyxtWeugL83nW+kPATlAimgh1hu7TCP94dDpflCV9o/lgZlH817xTYXrhToXJaMZSnDPw==",
    "shasum": "e50805582f4a082079201dffd8940e001f3721e0",
    "tarball": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-8.0.6.tgz",
    "fileCount": 148,
    "unpackedSize": 258805,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFSk/CRA9TVsSAnZWagAAzi8P/i7OduGBGIyg+ORyV/0a\n3zHZdy566bcBO3i9Hl22DhD6i08YP2GwOiVDqjMsuURjBX22WW82ek8UgHVu\nod2tHlVG9smtsSfDCLLshfFELZhGAWwB8MngNvS0Ahat1oOPHLmR19DkUVEO\nasPW8BrJl+5yA+D+OOQkTGExlWvONuPjQehy95DUi4YJOOmbpcOQkFiDXIrN\ndmYjar91GuO5tITIiIipndUYCClcjc4oEQaXjEGNk5WRH0+XtSHsAtIengQK\nwq9pMUjZuXQUrAhgiHBYbd7CWIfeCFdwY0K9TUdbO7OYIUa5sGTsqoVSW4qm\nNTGgXdzSOgZvLUgIFuWHlRDdi4WuK5rROKD5PWWijaGZQCkxZDowxeXOISKd\n97hF/b4XZqQciPddtHUfcAWTtUImJeYRWGUxw/iUj8lsh8WyeT9HxaN/rqOJ\nMier+VGIoF+OpgS02woG5LKEDu/JI82ixtQmMEMBKokz+xT2VaaWINgr6CiP\nrJ85kGTBvRRboLLliQ7lnK3Do73psZr8W+9zvGXcWRVv78L/bSs/YD1ikFBG\nEW6i7v0sq1aELd/hZaPmiks+01E0Fk4HxPbKUSgFXxrclWdJmPhvfrW56l8f\n17xU7TkbuaZpnyZlNPYEMJh4yugw8x70IejF+Qle4RQS52+GT4J/bTL/16Jk\n/gbB\r\n=EjQl\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 10.9.0",
    "npm": ">= 6.2.0"
  },
  "homepage": "https://github.com/angular/angular-cli",
  "husky": {
    "hooks": {
      "pre-push": "node ./bin/devkit-admin hooks/pre-push"
    }
  },
  "keywords": [
    "angular",
    "Angular CLI",
    "devkit",
    "sdk",
    "Angular DevKit",
    "blueprints",
    "scaffolding",
    "template",
    "tooling",
    "code generation",
    "schematics"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "angular",
      "email": "angular-core+npm@google.com"
    },
    {
      "name": "angular-devkit",
      "email": "hansl@google.com"
    }
  ],
  "name": "@angular-devkit/schematics",
  "optionalDependencies": {},
  "readme": "# Schematics\n> A scaffolding library for the modern web.\n\n## Description\nSchematics are generators that transform an existing filesystem. They can create files, refactor existing files, or move files around.\n\nWhat distinguishes Schematics from other generators, such as Yeoman or Yarn Create, is that schematics are purely descriptive; no changes are applied to the actual filesystem until everything is ready to be committed. There is no side effect, by design, in Schematics.\n\n# Glossary\n\n| Term | Description |\n|------|-------------|\n| **Schematics** | A generator that executes descriptive code without side effects on an existing file system. |\n| **Collection** | A list of schematics metadata. Schematics can be referred by name inside a collection. |\n| **Tool**       | The code using the Schematics library. |\n| **Tree**       | A staging area for changes, containing the original file system, and a list of changes to apply to it. |\n| **Rule**       | A function that applies actions to a `Tree`. It returns a new `Tree` that will contain all transformations to be applied. |\n| **Source**     | A function that creates an entirely new `Tree` from an empty filesystem. For example, a file source could read files from disk and create a Create Action for each of those.\n| **Action**     | An atomic operation to be validated and committed to a filesystem or a `Tree`. Actions are created by schematics. |\n| **Sink**       | The final destination of all `Action`s. |\n\n# Tooling\nSchematics is a library, and does not work by itself. A [reference CLI](https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/schematics_cli/bin/schematics.ts) is available on this repository, and is published on NPM at [@angular-devkit/schematics-cli](https://www.npmjs.com/package/@angular-devkit/schematics-cli). This document explains the library usage and the tooling API, but does not go into the tool implementation itself.\n\nThe tooling is responsible for the following tasks:\n\n1. Create the Schematic Engine, and pass in a Collection and Schematic loader.\n1. Understand and respect the Schematics metadata and dependencies between collections. Schematics can refer to dependencies, and it's the responsibility of the tool to honor those dependencies. The reference CLI uses NPM packages for its collections.\n1. Create the Options object. Options can be anything, but the schematics can specify a JSON Schema that should be respected. The reference CLI, for example, parses the arguments as a JSON object and validates it with the Schema specified by the collection.\n  1. Schematics provides some JSON Schema formats for validation that tooling should add. These validate paths, html selectors and app names. Please check the reference CLI for how these can be added.\n1. Call the schematics with the original Tree. The tree should represent the initial state of the filesystem. The reference CLI uses the current directory for this.\n1. Create a Sink and commit the result of the schematics to the Sink. Many sinks are provided by the library; FileSystemSink and DryRunSink are examples.\n1. Output any logs propagated by the library, including debugging information.\n\nThe tooling API is composed of the following pieces:\n\n## Engine\nThe `SchematicEngine` is responsible for loading and constructing `Collection`s and `Schematics`. When creating an engine, the tooling provides an `EngineHost` interface that understands how to create a `CollectionDescription` from a name, and how to create a `SchematicDescription`.\n\n# Schematics (Generators)\nSchematics are generators and part of a `Collection`.\n\n## Collection\nA Collection is defined by a `collection.json` file (in the reference CLI). This JSON defines the following properties:\n\n| Prop Name | Type | Description |\n|---|---|---|\n| **name** | `string` | The name of the collection. |\n| **version** | `string` | Unused field. |\n\n## Schematic\n\n# Operators, Sources and Rules\nA `Source` is a generator of a `Tree`; it creates an entirely new root tree from nothing. A `Rule` is a transformation from one `Tree` to another. A `Schematic` (at the root) is a `Rule` that is normally applied on the filesystem.\n\n## Operators\n`FileOperator`s apply changes to a single `FileEntry` and return a new `FileEntry`. The result follows these rules:\n\n1. If the `FileEntry` returned is null, a `DeleteAction` will be added to the action list.\n1. If the path changed, a `RenameAction` will be added to the action list.\n1. If the content changed, an `OverwriteAction` will be added to the action list.\n\nIt is impossible to create files using a `FileOperator`.\n\n## Provided Operators\nThe Schematics library provides multiple `Operator` factories by default that cover basic use cases:\n\n| FileOperator | Description |\n|---|---|\n| `contentTemplate<T>(options: T)` | Apply a content template (see the Template section) |\n| `pathTemplate<T>(options: T)` | Apply a path template (see the Template section) |\n\n## Provided Sources\nThe Schematics library additionally provides multiple `Source` factories by default:\n\n| Source | Description |\n|---|---|\n| `empty()` | Creates a source that returns an empty `Tree`. |\n| `source(tree: Tree)` | Creates a `Source` that returns the `Tree` passed in as argument. |\n| `url(url: string)` | Loads a list of files from the given URL and returns a `Tree` with the files as `CreateAction` applied to an empty `Tree`. |\n| `apply(source: Source, rules: Rule[])` | Apply a list of `Rule`s to a source, and return the resulting `Source`. |\n\n## Provided Rules\nThe schematics library also provides `Rule` factories by default:\n\n| Rule | Description |\n|---|---|\n| `noop()` | Returns the input `Tree` as is. |\n| `chain(rules: Rule[])` | Returns a `Rule` that's the concatenation of other `Rule`s. |\n| `forEach(op: FileOperator)` | Returns a `Rule` that applies an operator to every file of the input `Tree`. |\n| `move(root: string)` | Moves all the files from the input to a subdirectory. |\n| `merge(other: Tree)` | Merge the input `Tree` with the other `Tree`. |\n| `contentTemplate<T>(options: T)` | Apply a content template (see the Template section) to the entire `Tree`. |\n| `pathTemplate<T>(options: T)` | Apply a path template (see the Template section) to the entire `Tree`. |\n| `template<T>(options: T)` | Apply both path and content templates (see the Template section) to the entire `Tree`. |\n| `filter(predicate: FilePredicate<boolean>)` | Returns the input `Tree` with files that do not pass the `FilePredicate`. |\n\n\n# Templating\nAs referenced above, some functions are based upon a file templating system, which consists of path and content templating.\n\nThe system operates on placeholders defined inside files or their paths as loaded in the `Tree` and fills these in as defined in the following, using values passed into the `Rule` which applies the templating (i.e. `template<T>(options: T)`).\n\n## Path Templating\n| Placeholder | Description |\n|---|---|\n| __variable__ | Replaced with the value of `variable`. |\n| __variable@function__ | Replaced with the result of the call `function(variable)`. Can be chained to the left (`__variable@function1@function2__ ` etc).  |\n\n## Content Templating\n| Placeholder | Description |\n|---|---|\n| <%= expression %> | Replaced with the result of the call of the given expression. This only supports direct expressions, no structural (for/if/...) JavaScript. |\n| <%- expression %> | Same as above, but the value of the result will be escaped for HTML when inserted (i.e. replacing '<' with '&lt;') |\n| <% inline code %> | Inserts the given code into the template structure, allowing to insert structural JavaScript. |\n| <%# text %> | A comment, which gets entirely dropped. |\n\n\n# Examples\n\n## Simple\nAn example of a simple Schematics which creates a \"hello world\" file, using an option to determine its path:\n\n```typescript\nimport {Tree} from '@angular-devkit/schematics';\n\nexport default function MySchematic(options: any) {\n  return (tree: Tree) => {\n    tree.create(options.path + '/hi', 'Hello world!');\n    return tree;\n  };\n}\n```\n\nA few things from this example:\n\n1. The function receives the list of options from the tooling.\n1. It returns a [`Rule`](src/engine/interface.ts#L73), which is a transformation from a `Tree` to another `Tree`.\n\n## Templating\nA simplified example of a Schematics which creates a file containing a new Class, using an option to determine its name:\n\n```typescript\n// files/__name@dasherize__.ts\n\nexport class <%= classify(name) %> {\n}\n```\n\n```typescript\n// index.ts\n\nimport { strings } from '@angular-devkit/core';\nimport {\n  Rule, SchematicContext, SchematicsException, Tree,\n  apply, branchAndMerge, mergeWith, template, url,\n} from '@angular-devkit/schematics';\nimport { Schema as ClassOptions } from './schema';\n\nexport default function (options: ClassOptions): Rule {\n  return (tree: Tree, context: SchematicContext) => {\n    if (!options.name) {\n      throw new SchematicsException('Option (name) is required.');\n    }\n\n    const templateSource = apply(\n      url('./files'),\n      [\n        template({\n          ...strings,\n          ...options,\n        }),\n      ]\n    );\n\n    return branchAndMerge(mergeWith(templateSource));\n  };\n}\n```\n\nAdditional things from this example:\n1. `strings` provides the used `dasherize` and `classify` functions, among others.\n1. The files are on-disk in the same root directory as the `index.ts` and loaded into a `Tree`.\n1. Then the `template` `Rule` fills in the specified templating placeholders. For this, it only knows about the variables and functions passed to it via the options-object.\n1. Finally, the resulting `Tree`, containing the new file, is merged with the existing files of the project which the Schematic is run on.\n\n# Future Work\nSchematics is not done yet. Here's a list of things we are considering:\n\n* Smart defaults for Options. Having a JavaScript function for default values based on other default values.\n* Prompt for input options. This should only be prompted for the original schematics, dependencies to other schematics should not trigger another prompting.\n* Tasks for running tooling-specific jobs before and after a schematics has been scaffolded. Such tasks can involve initialize git, or npm install. A specific list of tasks should be provided by the tool, with unsupported tasks generating an error.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/angular-cli.git"
  },
  "typings": "src/index.d.ts",
  "version": "8.0.6",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">= 10.9.0",
        "npm": ">= 6.2.0"
      },
      "pkgid": "@angular-devkit/schematics@8.0.6"
    }
  ]
}
