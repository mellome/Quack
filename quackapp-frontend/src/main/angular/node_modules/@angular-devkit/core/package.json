{
  "_args": [
    [
      {
        "raw": "@angular-devkit/core@8.0.6",
        "scope": "@angular-devkit",
        "escapedName": "@angular-devkit%2fcore",
        "name": "@angular-devkit/core",
        "rawSpec": "8.0.6",
        "spec": "8.0.6",
        "type": "version"
      },
      "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/@angular-devkit/build-angular"
    ]
  ],
  "_from": "@angular-devkit/core@8.0.6",
  "_hasShrinkwrap": false,
  "_id": "@angular-devkit/core@8.0.6",
  "_location": "/@angular-devkit/core",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/core_8.0.6_1561667898417_0.8872911441082179"
  },
  "_npmUser": {
    "name": "angular",
    "email": "devops+npm@angular.io"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {
    "fast-deep-equal": "2.0.1",
    "fast-json-stable-stringify": "2.0.0",
    "json-schema-traverse": "0.4.1",
    "sourcemap-codec": "1.4.6",
    "uri-js": "4.2.2"
  },
  "_requested": {
    "raw": "@angular-devkit/core@8.0.6",
    "scope": "@angular-devkit",
    "escapedName": "@angular-devkit%2fcore",
    "name": "@angular-devkit/core",
    "rawSpec": "8.0.6",
    "spec": "8.0.6",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/architect",
    "/@angular-devkit/build-angular",
    "/@angular-devkit/build-webpack",
    "/@angular-devkit/schematics",
    "/@angular/cli",
    "/@ngtools/webpack",
    "/@schematics/angular",
    "/@schematics/update"
  ],
  "_resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-8.0.6.tgz",
  "_shasum": "540ff673f1808fc09538c8aa6c01f08750921301",
  "_shrinkwrap": null,
  "_spec": "@angular-devkit/core@8.0.6",
  "_where": "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/@angular-devkit/build-angular",
  "author": {
    "name": "Angular Authors"
  },
  "bugs": {
    "url": "https://github.com/angular/angular-cli/issues"
  },
  "dependencies": {
    "ajv": "6.10.0",
    "fast-json-stable-stringify": "2.0.0",
    "magic-string": "0.25.2",
    "rxjs": "6.4.0",
    "source-map": "0.7.3"
  },
  "description": "Angular DevKit - Core Utility Library",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-gbKEVsQuYqBJPzgaxEitvs0aN9NwmUHhTkum28mRyPbS3witay/q8+3ls48M2W+98Da/PQbfndxFY4OCa+qHEA==",
    "shasum": "540ff673f1808fc09538c8aa6c01f08750921301",
    "tarball": "https://registry.npmjs.org/@angular-devkit/core/-/core-8.0.6.tgz",
    "fileCount": 227,
    "unpackedSize": 491028,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFSk7CRA9TVsSAnZWagAAvIQP/197WhMZJmkF3iONvpij\nkTIKS1VDeFDGuxvOrH/aEKflV79hmtH4LHFvLEp3aB3orzWcNm5eqIB6sZo+\n7qqKA02cPps3avFojl4hBBY/WxzJ1xHf7ktUa/Rm96dNubQpdnsmSWFvf/6p\nPl6rQ6FSwMosLP6qwKeaq9xmYMAyMmnGLl5wVTWO+KnlbzdP8OqVdE0HjzPn\nsx9haEZVRNw8YdgiIgJr4mL1m5QN38bCm51quhDht9jqyHzXCfwIe9OG9xF4\nXDcdJkyJR80zNaHBU/gr2uguf6+Acu2kGPNTTEG7Y5CJTKW9EFFQ5QpI5Ljt\nu7gvBdqToaWs9BaQdbIdVpiSps4LFiGWJBndV46XyixZMwn7mR6f2sYeqKuS\ndBVELNUl9isI9/pQN/SqVVxFwcgTrfZEjj08iH6+DmS0SfbDGfKK6zGHOr4I\n0wbuCNH4I5Uq5w4zUch6+X4zSQiCQm3JlsalcKj3WFV5WipzfU9j9EP9ylHl\nVKVt8+VUISHtrPL3RGE3z5lzgPtBEeDZVuOTYv5hTdnUrC+l9aE8wmZa8dJf\n1E4cIUN38QlIgX85sm5xRbToifhXZkzL38MJqnyxtDYfMa+s6F0YMTUX3tVv\nFFMzVON/C8cEbKL2bmT6LlNbxGoACPFIAod6EW3Thp8cMuyC8kliQy0uYbm6\nVP1H\r\n=15Ra\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 10.9.0",
    "npm": ">= 6.2.0"
  },
  "homepage": "https://github.com/angular/angular-cli",
  "husky": {
    "hooks": {
      "pre-push": "node ./bin/devkit-admin hooks/pre-push"
    }
  },
  "keywords": [
    "angular",
    "Angular CLI",
    "devkit",
    "sdk",
    "Angular DevKit",
    "core"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "angular",
      "email": "angular-core+npm@google.com"
    },
    {
      "name": "angular-devkit",
      "email": "hansl@google.com"
    }
  ],
  "name": "@angular-devkit/core",
  "optionalDependencies": {},
  "readme": "# Core\n> Shared utilities for Angular DevKit.\n\n# Exception\n\n# Json\n\n## Schema\n\n### SchemaValidatorResult\n```\nexport interface SchemaValidatorResult {\n  success: boolean;\n  errors?: string[];\n}\n```\n\n### SchemaValidator\n\n```\nexport interface SchemaValidator {\n  (data: any): Observable<SchemaValidatorResult>;\n}\n```\n\n### SchemaFormatter\n\n```\nexport interface SchemaFormatter {\n  readonly async: boolean;\n  validate(data: any): boolean | Observable<boolean>;\n}\n```\n\n### SchemaRegistry\n\n```\nexport interface SchemaRegistry {\n  compile(schema: Object): Observable<SchemaValidator>;\n  addFormat(name: string, formatter: SchemaFormatter): void;\n}\n```\n\n### CoreSchemaRegistry\n\n`SchemaRegistry` implementation using https://github.com/epoberezkin/ajv.\nConstructor accepts object containing `SchemaFormatter` that will be added automatically.\n\n```\nexport class CoreSchemaRegistry implements SchemaRegistry {\n  constructor(formats: { [name: string]: SchemaFormatter} = {}) {}\n}\n```\n\n# Logger\n\n# Utils\n\n# Virtual FS\n\n# Workspaces\n\nThe `workspaces` namespace provides an API for interacting with the workspace file formats.\nIt provides an abstraction of the underlying storage format of the workspace and provides\nsupport for both reading and writing.  Currently, the only supported format is the JSON-based\nformat used by the Angular CLI.  For this format, the API provides internal change tracking of values which\nenables fine-grained updates to the underlying storage of the workspace.  This allows for the\nretention of existing formatting and comments.\n\nA workspace is defined via the following object model.  Definition collection objects are specialized\nJavascript `Map` objects with an additional `add` method to simplify addition and provide more localized\nerror checking of the newly added values.\n\n```ts\nexport interface WorkspaceDefinition {\n    readonly extensions: Record<string, JsonValue | undefined>;\n    readonly projects: ProjectDefinitionCollection;\n}\n\nexport interface ProjectDefinition {\n    readonly extensions: Record<string, JsonValue | undefined>;\n    readonly targets: TargetDefinitionCollection;\n    root: string;\n    prefix?: string;\n    sourceRoot?: string;\n}\n\nexport interface TargetDefinition {\n    options?: Record<string, JsonValue | undefined>;\n    configurations?: Record<string, Record<string, JsonValue | undefined> | undefined>;\n    builder: string;\n}\n```\n\nThe API is asynchronous and has two main functions to facilitate reading, creation, and modifying\na workspace: `readWorkspace` and `writeWorkspace`.\n\n```ts\nexport enum WorkspaceFormat {\n  JSON,\n}\n```\n\n```ts\nexport function readWorkspace(\n  path: string,\n  host: WorkspaceHost,\n  format?: WorkspaceFormat,\n): Promise<{ workspace: WorkspaceDefinition; }>;\n```\n\n```ts\nexport function writeWorkspace(\n  workspace: WorkspaceDefinition,\n  host: WorkspaceHost,\n  path?: string,\n  format?: WorkspaceFormat,\n): Promise<void>;\n```\n\nA `WorkspaceHost` abstracts the underlying data access methods from the functions.  It provides\nmethods to read, write, and analyze paths.  A utility function is provided to create\nan instance of a `WorkspaceHost` from the Angular DevKit's virtual filesystem host abstraction.\n\n```ts\nexport interface WorkspaceHost {\n    readFile(path: string): Promise<string>;\n    writeFile(path: string, data: string): Promise<void>;\n    isDirectory(path: string): Promise<boolean>;\n    isFile(path: string): Promise<boolean>;\n}\n\nexport function createWorkspaceHost(host: virtualFs.Host): WorkspaceHost;\n```\n\n## Usage Example\n\nTo demonstrate the usage of the API, the following code will show how to add a option property\nto a build target for an application.\n\n```ts\nimport { NodeJsSyncHost } from '@angular-devkit/core/node';\nimport { workspaces } from '@angular-devkit/core';\n\nasync function demonstrate() {\n    const host = workspaces.createWorkspaceHost(new NodeJsSyncHost());\n    const workspace = await workspaces.readWorkspace('path/to/workspace/directory/', host);\n\n    const project = workspace.projects.get('my-app');\n    if (!project) {\n      throw new Error('my-app does not exist');\n    }\n\n    const buildTarget = project.targets.get('build');\n    if (!buildTarget) {\n      throw new Error('build target does not exist');\n    }\n\n    buildTarget.options.optimization = true;\n\n    await workspaces.writeWorkspace(workspace, host);\n}\n\ndemonstrate();\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/angular-cli.git"
  },
  "typings": "src/index.d.ts",
  "version": "8.0.6",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">= 10.9.0",
        "npm": ">= 6.2.0"
      },
      "pkgid": "@angular-devkit/core@8.0.6"
    }
  ]
}
