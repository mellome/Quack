{
  "_args": [
    [
      {
        "raw": "cryonic@^1.0.0",
        "scope": null,
        "escapedName": "cryonic",
        "name": "cryonic",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/popper"
    ]
  ],
  "_from": "cryonic@>=1.0.0 <2.0.0",
  "_id": "cryonic@1.0.0",
  "_inCache": true,
  "_location": "/cryonic",
  "_nodeVersion": "8.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cryonic-1.0.0.tgz_1509311620272_0.577763871755451"
  },
  "_npmUser": {
    "name": "pemrouz",
    "email": "p3pedram@hotmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cryonic@^1.0.0",
    "scope": null,
    "escapedName": "cryonic",
    "name": "cryonic",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/popper"
  ],
  "_resolved": "https://registry.npmjs.org/cryonic/-/cryonic-1.0.0.tgz",
  "_shasum": "57320e757d7c3abc72914b037e049295e6bd04f4",
  "_shrinkwrap": null,
  "_spec": "cryonic@^1.0.0",
  "_where": "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/popper",
  "author": {
    "name": "Hunter Loftis",
    "email": "hunter@hunterloftis.com"
  },
  "bugs": {
    "url": "https://github.com/hunterloftis/cryo/issues"
  },
  "dependencies": {},
  "description": "Easily pickle/serialize/freeze/store and re-hydrate complex JavaScript objects (including Functions)",
  "devDependencies": {
    "chai": "~1.4.2",
    "mocha": "~1.7.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8wqWtdI+7IQVYCDS40H/H267zb2Lwn08Q7HT0hIqHNMkRPQdV355dPRu/hV02k2sBtZJ+KEnRVtaZWzT3hPVmQ==",
    "shasum": "57320e757d7c3abc72914b037e049295e6bd04f4",
    "tarball": "https://registry.npmjs.org/cryonic/-/cryonic-1.0.0.tgz"
  },
  "engines": {
    "node": ">= 0.4.x"
  },
  "gitHead": "aefef987feddda6eebe7a527ef9f278a55515213",
  "homepage": "https://github.com/hunterloftis/cryo#readme",
  "keywords": [
    "pickle",
    "serialize",
    "store",
    "hydrate",
    "freeze",
    "json"
  ],
  "main": "./lib/cryo.js",
  "maintainers": [
    {
      "name": "pemrouz",
      "email": "p3pedram@hotmail.com"
    }
  ],
  "name": "cryonic",
  "optionalDependencies": {},
  "readme": "# Cryo\r\n\r\nJSON on steroids.\r\n\r\nBuilt for node.js and browsers. Cryo is inspired by Python's pickle and works similarly to JSON.stringify() and JSON.parse().\r\nCryo.stringify() and Cryo.parse() improve on JSON in these circumstances:\r\n\r\n- [Undefined](#undefined)\r\n- [Date](#date)\r\n- [Infinity](#infinity)\r\n- [Object references](#references)\r\n- [Attached properties](#properties)\r\n- [Functions](#functions)\r\n- [DOM Nodes](#dom)\r\n\r\n## Installation\r\n\r\n### node.js\r\n\r\n```\r\n$ npm install cryo\r\n```\r\n\r\n### browser\r\n\r\nWith Bower:\r\n\r\n```\r\nbower install cryo\r\n```\r\n\r\nAdd the [latest minified build](https://github.com/hunterloftis/cryo/tree/master/build) to your project as a script:\r\n\r\n```html\r\n<script type='text/javascript' src='cryo-0.0.4.js'></script>\r\n```\r\n\r\n## Use\r\n\r\nCryo has a very simple API that mimicks JSON:\r\n\r\n- `Cryo.stringify(item, [callbacks])`\r\n- `Cryo.parse(string, [callbacks])`\r\n\r\n```js\r\nvar Cryo = require('cryo');\r\n\r\nvar obj = {\r\n  name: 'Hunter',\r\n  created: new Date(),\r\n  hello: function() {\r\n    console.log(this.name + ' said hello in ' + this.created.getFullYear() + '!');\r\n  }\r\n};\r\n\r\nvar frozen = Cryo.stringify(obj);\r\nvar hydrated = Cryo.parse(frozen);\r\n\r\nhydrated.hello(); // Hunter said hello in 2013!\r\n```\r\n\r\n## More powerful JSON\r\n\r\n### Undefined\r\n\r\nCryo takes a verbatim snapshot of all your properties, including those that are `undefined` - which JSON ignores.\r\n\r\n```js\r\nvar Cryo = require('../lib/cryo');\r\n\r\nvar obj = {\r\n  defaultValue: undefined\r\n};\r\n\r\nvar withJSON = JSON.parse(JSON.stringify(obj));\r\nconsole.log(withJSON.hasOwnProperty('defaultValue'));   // false\r\n\r\nvar withCryo = Cryo.parse(Cryo.stringify(obj));\r\nconsole.log(withCryo.hasOwnProperty('defaultValue'));   // true\r\n```\r\n\r\n### Date\r\n\r\nCryo successfully works with `Date` objects, which `JSON.stringify()` mangles into strings.\r\n\r\n```js\r\nvar Cryo = require('../lib/cryo');\r\n\r\nvar now = new Date();\r\n\r\nvar withJSON = JSON.parse(JSON.stringify(now));\r\nconsole.log(withJSON instanceof Date);              // false\r\n\r\nvar withCryo = Cryo.parse(Cryo.stringify(now));\r\nconsole.log(withCryo instanceof Date);              // true\r\n```\r\n\r\n### References\r\n\r\n`JSON.stringify()` makes multiple copies of single objects, losing object relationships.\r\nWhen several references to the same object are stringified with JSON, those references are turned into clones of each other.\r\nCryo maintains object references so the restored objects are identical to the originals.\r\nThis is easier to understand with an example:\r\n\r\n```js\r\nvar Cryo = require('../lib/cryo');\r\n\r\nvar userList = [{ name: 'Abe' }, { name: 'Bob' }, { name: 'Carl' }];\r\nvar state = {\r\n  users: userList,\r\n  activeUser: userList[1]\r\n};\r\n\r\nvar withJSON = JSON.parse(JSON.stringify(state));\r\nconsole.log(withJSON.activeUser === withJSON.users[1]);   // false\r\n\r\nvar withCryo = Cryo.parse(Cryo.stringify(state));\r\nconsole.log(withCryo.activeUser === withCryo.users[1]);   // true\r\n```\r\n\r\n### Infinity\r\n\r\nCryo successfully stringifies and parses `Infinity`, which JSON mangles into `null`.\r\n\r\n```js\r\nvar Cryo = require('../lib/cryo');\r\n\r\nvar number = Infinity;\r\n\r\nvar withJSON = JSON.parse(JSON.stringify(number));\r\nconsole.log(withJSON === Infinity);                 // false\r\n\r\nvar withCryo = Cryo.parse(Cryo.stringify(number));\r\nconsole.log(withCryo === Infinity);                 // true\r\n```\r\n\r\n### Properties\r\n\r\nObjects, Arrays, Dates, and Functions can all hold properties, but JSON will only stringify properties on Objects.\r\nCryo will recover properties from all containers:\r\n\r\n```js\r\nvar Cryo = require('../lib/cryo');\r\n\r\nfunction first() {}\r\nfirst.second = new Date();\r\nfirst.second.third = [1, 2, 3];\r\nfirst.second.third.fourth = { name: 'Hunter' };\r\n\r\ntry {\r\n  var withJSON = JSON.parse(JSON.stringify(first));\r\n  console.log(withJSON.second.third.fourth.name === 'Hunter');\r\n} catch(e) {\r\n  console.log('error');                                       // error\r\n}\r\n\r\nvar withCryo = Cryo.parse(Cryo.stringify(first));\r\nconsole.log(withCryo.second.third.fourth.name === 'Hunter');  // true\r\n```\r\n\r\n### Functions\r\n\r\nCryo will stringify functions, which JSON ignores.\r\n\r\n**Note:** Usually, if you've come up with a solution that needs to serialize functions, a better solution exists that doesn't.\r\nHowever, sometimes this can be enormously useful.\r\nCryo will make faithful hydrated functions and objects with properties that are functions.\r\n\r\n```js\r\nvar Cryo = require('../lib/cryo');\r\n\r\nfunction fn() {\r\n  console.log('Hello, world!');\r\n}\r\n\r\ntry {\r\n  var withJSON = JSON.parse(JSON.stringify(fn));\r\n  withJSON();\r\n} catch(e) {\r\n  console.log('error');                             // error\r\n}\r\n\r\nvar withCryo = Cryo.parse(Cryo.stringify(fn));\r\nwithCryo();                                         // Hello, world!\r\n```\r\n\r\n### Custom Types\r\n\r\nCryo can allow you to stringify and parse custom types by using the optional `callbacks` argument. The `prepare` for `stringify` is called before each item is stringified, allowing you to alter an object just before it's serialized. The `finalize` callback for `parse` is called after each item is re-created, allowing you to alter an object just after it's de-serialized:\r\n\r\n```js\r\nfunction Person() {}\r\nvar person = new Person();\r\nperson.friends = [new Person()];\r\n\r\nvar stringified = Cryo.stringify(person, { prepare: function(obj) {\r\n  // store any object's constructor name under a variable called\r\n  // __class__ which can later be be used to restore the object's\r\n  // prototype.\r\n  obj.__class__ = obj.constructor.name;\r\n}});\r\nvar parsed = Cryo.parse(stringified, { finalize: function(obj) {\r\n  // look for objects that define a __class__ and restore their\r\n  // prototype by finding the class on the global window (you may need\r\n  // to look elsewhere for the class).\r\n  if (obj.__class__ && window[obj.__class__]) {\r\n    obj.__proto__ = window[obj.__class__].prototype;\r\n    delete obj.__class__;\r\n  }\r\n}});\r\n\r\nparsed instanceof Person; // true\r\nparsed.friends[0] instanceof Person; // true\r\n```\r\n\r\n### Controlling Serialization\r\n\r\nBy default, all *own* properties of an object will be serialized.  However, you can specify a custom `isSerializable` method as part of `callbacks` to pass to `stringify` to change this behavior.  By default it is defined as such:\r\n\r\n```js\r\nCryo.stringify(data, { isSerializable: function(item, key) {\r\n  return item.hasOwnProperty(key);\r\n}});\r\n```\r\n\r\n### DOM\r\n\r\nJSON chokes when you try to stringify an object with a reference to a DOM node, giving `Uncaught TypeError: Converting circular structure to JSON.`\r\nCryo will ignore DOM nodes so you can serialize such objects without hassle.\r\n\r\n```js\r\nvar obj = {\r\n  button: document.getElementById('my-button');\r\n  message: 'Hello'\r\n};\r\n\r\ntry {\r\n  var withJSON = JSON.parse(JSON.stringify(obj));\r\n  console.log(withJSON.message === 'Hello');\r\n} catch(e) {\r\n  console.log('error');                             // error\r\n}\r\n\r\nvar withCryo = Cryo.parse(Cryo.stringify(obj));\r\nconsole.log(withCryo.message === 'Hello');          // true\r\n```\r\n\r\n## Stringified Output\r\n\r\n`Cryo.stringify()` returns valid JSON data with non-compatible types encoded as strings.\r\nThus, anything you can do with JSON, you can do with Cryo.\r\n\r\nHere is the stringified result from the hello, world example:\r\n\r\n```json\r\n{\r\n  \"root\":\"_CRYO_REF_2\",\r\n  \"references\":[\r\n    {\r\n      \"contents\": {},\r\n      \"value\":\"_CRYO_DATE_1358245390835\"\r\n    },\r\n    {\r\n      \"contents\": {},\r\n      \"value\":\"_CRYO_FUNCTION_function () {\\n    console.log(this.name + ' said hello in ' + this.created.getFullYear() + '!');\\n  }\"\r\n    },\r\n    {\r\n      \"contents\":{\r\n        \"name\":\"Hunter\",\r\n        \"created\":\"_CRYO_REF_0\",\r\n        \"hello\":\"_CRYO_REF_1\"\r\n      },\r\n      \"value\":\"_CRYO_OBJECT_\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## Tests\r\n\r\nTests require node.js.\r\n\r\n```\r\n$ git clone git://github.com/hunterloftis/cryo.git\r\n$ cd cryo\r\n$ make setup\r\n$ make test\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/hunterloftis/cryo.git"
  },
  "version": "1.0.0"
}
