{
  "_args": [
    [
      {
        "raw": "xrs@^1.2.2",
        "scope": null,
        "escapedName": "xrs",
        "name": "xrs",
        "rawSpec": "^1.2.2",
        "spec": ">=1.2.2 <2.0.0",
        "type": "range"
      },
      "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/rijs.sync"
    ]
  ],
  "_from": "xrs@>=1.2.2 <2.0.0",
  "_id": "xrs@1.2.2",
  "_inCache": true,
  "_location": "/xrs",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/xrs_1.2.2_1524428215591_0.6909081874088743"
  },
  "_npmUser": {
    "name": "pemrouz",
    "email": "p3pedram@hotmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xrs@^1.2.2",
    "scope": null,
    "escapedName": "xrs",
    "name": "xrs",
    "rawSpec": "^1.2.2",
    "spec": ">=1.2.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/rijs.sync"
  ],
  "_resolved": "https://registry.npmjs.org/xrs/-/xrs-1.2.2.tgz",
  "_shasum": "767ee98cd09c97e8a4b9dc1191973d214ea7b7ab",
  "_shrinkwrap": null,
  "_spec": "xrs@^1.2.2",
  "_where": "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/rijs.sync",
  "author": {
    "name": "pemrouz",
    "url": "https://github.com/pemrouz"
  },
  "dependencies": {
    "colors": "^1.2.1",
    "express": "^4.15.4",
    "nanosocket": "*",
    "utilise": "^2.3.5",
    "uws": "^9.148.0"
  },
  "description": "reactive server",
  "devDependencies": {
    "global-mocks": "*",
    "puppeteer": "^0.12.0",
    "rollup-plugin-commonjs": "^8.2.5",
    "rollup-plugin-node-resolve": "^3.0.0",
    "tap": "^10.7.2",
    "utilise.emitterify": "^1.7.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-pLmxYQnG3Qm0xtZZMFr7W7ls9DYNtNe9D5KLQpniu3DeoHDMkFXrjo8OjCEyhQ3Pf4Jr/pYFDhuMrQVTfEqEOw==",
    "shasum": "767ee98cd09c97e8a4b9dc1191973d214ea7b7ab",
    "tarball": "https://registry.npmjs.org/xrs/-/xrs-1.2.2.tgz",
    "fileCount": 13,
    "unpackedSize": 47780,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3O24CRA9TVsSAnZWagAAb+QP/2e8+TIfFpaPaSGGGxgM\n8bN4Uo+rmzYOZPuqxKXP/nrPlUEhQmkEoATfg0h8NnNdDfpVn3SQe8s0D5eq\n6neF9ofghaBS3N/HaRBSV42q+MG4Z4cWvrtYJLchhtRZxKdegSHi/GjaneoE\npdr3D1GlyjbRZPWOtqFVgFBF/IcsXSdZ9N/o681Lg053kbhf61TAGez8aIK7\nxPyxBxdkmS2fjB4/sr2Sw/xwNmIZt6r3L/aiwARqQqkacf57BZ95Di2BWoRt\nY+OxBFZP5LWWkKJ9oMY0M0OGcuKmioewjKSTWE0004wTwAQPCC1MCSGi69IP\nJtCbpdnpWG4YNWTBIc8etUU+L73cb9BcfZ/R4e8xIWRWjuUnRYb0EybsbMXY\nsfNjZSO6rLB9oBhuAFBKwtJT25mLd7dKw6moeOtvpF1Qj3b7wrPwxxbnAiU2\nudjW2XDuAYOPDAJN9enlUsk8V0BzMy10lbNgaUJJNrBZi16QCHhBtM8Yk6EP\n6UBp1os5stKNIUDNu20+f0ac+I5Fjva8t921XD7hHP4XnsPTaUfhESfWX2fY\n9H0L2wHJTG3aZaYNdLUKm4flXAfXfJ9hIf8nfnP5QK38e496VwdswLKFELlZ\nrxSfoZgqDt1PulWWv/WTCfrS4Zc/1sD/IhsSAcEDSgl3B69lnep+MtN4KJAr\n9U5n\r\n=rDxt\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "47e41176775f62ba66be2957d8196eb28d4e0c68",
  "keywords": [
    "reactive",
    "server",
    "express",
    "uws"
  ],
  "license": "pemrouz.mit-license.org",
  "main": "index.js",
  "maintainers": [
    {
      "name": "pemrouz",
      "email": "p3pedram@hotmail.com"
    }
  ],
  "name": "xrs",
  "optionalDependencies": {},
  "readme": "# Reactive Server\r\n\r\n* Allows you to send a [stream](https://github.com/utilise/emitterify/#emitterify) as input, and return a stream \r\n* You can also return a value, promise or stream\r\n* Client is ~3 kb bundled, built on top of [nanosocket](https://github.com/pemrouz/nanosocket). Server is express + uws.\r\n* Allows uploading binary with progress events\r\n\r\n#### Server:\r\n\r\n```js\r\nxrs = reqire('xrs')\r\nserver = xrs(req => 'ack')\r\nserver = xrs(req => Promise.resolve('ack'))\r\nserver = xrs(req => stream().on('start', function(){ this.next(1); this.next(2) }))\r\n```\r\n\r\n* You can also use the signature `(req, res)` if you don't want to return the value.\r\n* You can access the underlying `uws` , `express` and `http` instance on the `server`.\r\n* For additional options: you pass in `{ port, certs, processor }` instead of just a `processor` function. Otherwise the `port` will be random, and no `certs` will mean you get a HTTP server rather than a HTTPS server.\r\n* The input stream can be accessed via `req.on('data')`\r\n* The `req` has the following properties: `{ id, socket, data, res }` - `data` is what the client sent\r\n\r\n#### Client\r\n\r\n```js\r\nsend = xrs()\r\nsend('value')\r\nsend(Promise.resolve('value'))\r\nsend(node.on('click').until(node.on('removed')))\r\n  .map(...)\r\n  .filter(...)\r\n```\r\n\r\nYou can similarly send a value, promise or stream. `send` returns a stream of all the server responses. In all cases, you get a `sent`  event on the stream when it's actually sent. When sending binaries you can also associate some metadata, and get a stream of progress events (this is from the end-to-end tests): \r\n\r\n```js\r\nconst results = []\r\nawait send(binary, { foo: 'bar' })\r\n  .on('sent', d => results.push({ type: 'sent', value: d }))\r\n  .on('progress', d => results.push({ type: 'progress', value: d }))\r\n  .map(d => results.push({ type: 'complete', value: d }))\r\n  .filter(d => results.length === 4)\r\n\r\nresults === [\r\n  { type: 'sent'    , value: { id: '1' } }\r\n, { type: 'progress', value: { received: 1024, total: 2000 } }\r\n, { type: 'progress', value: { received: 2000, total: 2000 } }\r\n, { type: 'complete', value: 'ack' }\r\n]\r\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "npm run rollup && npm run minify && npm run gzip",
    "coverage": "tap *.test.js --coverage --coverage-report=lcov",
    "gzip": "gzip -c client.min.js > client.min.js.gz",
    "minify": "uglifyjs client.bundle.js -m -c keep_fargs=false > client.min.js",
    "rollup": "rollup -c",
    "start": "node server.js",
    "test": "tap *.test.js"
  },
  "version": "1.2.2"
}
