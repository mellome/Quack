{
  "_args": [
    [
      {
        "raw": "streamroller@^1.0.6",
        "scope": null,
        "escapedName": "streamroller",
        "name": "streamroller",
        "rawSpec": "^1.0.6",
        "spec": ">=1.0.6 <2.0.0",
        "type": "range"
      },
      "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/log4js"
    ]
  ],
  "_from": "streamroller@^1.0.6",
  "_hasShrinkwrap": false,
  "_id": "streamroller@1.0.6",
  "_location": "/streamroller",
  "_nodeVersion": "10.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/streamroller_1.0.6_1562903873034_0.4252618459303401"
  },
  "_npmUser": {
    "name": "csausdev",
    "email": "gareth.nomiddlename@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "lodash": "4.17.14"
  },
  "_requested": {
    "raw": "streamroller@^1.0.6",
    "scope": null,
    "escapedName": "streamroller",
    "name": "streamroller",
    "rawSpec": "^1.0.6",
    "spec": ">=1.0.6 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/log4js"
  ],
  "_resolved": "https://registry.npmjs.org/streamroller/-/streamroller-1.0.6.tgz",
  "_shasum": "8167d8496ed9f19f05ee4b158d9611321b8cacd9",
  "_shrinkwrap": null,
  "_spec": "streamroller@^1.0.6",
  "_where": "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/log4js",
  "author": {
    "name": "Gareth Jones",
    "email": "gareth.nomiddlename@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/nomiddlename/streamroller/issues"
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "dependencies": {
    "async": "^2.6.2",
    "date-format": "^2.0.0",
    "debug": "^3.2.6",
    "fs-extra": "^7.0.1",
    "lodash": "^4.17.14"
  },
  "description": "file streams that roll over when size limits, or dates are reached",
  "devDependencies": {
    "@commitlint/cli": "^6.2.0",
    "@commitlint/config-conventional": "^6.1.3",
    "eslint": "^4.19.1",
    "husky": "^0.14.3",
    "mocha": "^4.0.1",
    "nyc": "^11.9.0",
    "proxyquire": "^2.1.0",
    "should": "^11.2.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-3QC47Mhv3/aZNFpDDVO44qQb9gwB9QggMEE0sQmkTAwBVYdBRWISdsywlkfm5II1Q5y/pmrHflti/IgmIzdDBg==",
    "shasum": "8167d8496ed9f19f05ee4b158d9611321b8cacd9",
    "tarball": "https://registry.npmjs.org/streamroller/-/streamroller-1.0.6.tgz",
    "fileCount": 13,
    "unpackedSize": 95188,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdKAVCCRA9TVsSAnZWagAA9qoP/RL4B6ktILNIRF75WI3Y\niEpvTMjtyKL3H+/PvKNOAGVt887UGcX3DWmGATOyOi6ClnJ551ieSeajRBml\nYnMivUw95mcwkpHKZUG1+8B8LMUY2mK94WkScDiUPQfN6YjxvOEq/JZ991bo\nQgpBwplefWSXthV+z1GHhiHBD1Db4F+x0VseTbb5t5YwgnBrVejhk3JXc4Xe\nFkmqklCg7akKhnmMsnEObkswEBpfMoBbcVW8SpVDJb3s0C/oQBz1UuPGXRPz\nvoAiOkj/BiWmFvFTX5Ne2DP6QSnDNXe/H+WeVSAQkJ/W596hA8jfBWb890J+\nVp0rXsiEXLkWvvMGjPWa3EVtOdMOAz0wf5aoB/lLhtArjB44NmmZ6mr74aRp\nR6wSToGsBEFfDaader5ssEUMzfPruJZ3oK9FM1SQKe+uvvZCS3cPmTwHaw7b\ndmHhNmdOaAhEO1ErYZAWI6ZmcxmIWJHHyKaiuwL6qHT7dHpveWAiDexmUWVI\nuwKaZ764M1UPZ2R4WTjSt2bj+v+ia0woBbOYT1beZbf3WKbl/49yByhRn+a8\nTQavyBm4IjZuyzj2+Ic8FQyBA2K+yWl24Tp19+0VXmqCwz8UQxnMLEkyO0/6\nT95xWM9QHull/W88U5h+3napi0W0DOKzfF2M4G/ks3P9jgm8HGW7Fkb+sf52\nc07U\r\n=Y2rH\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0"
  },
  "eslintConfig": {
    "env": {
      "browser": false,
      "node": true,
      "es6": true,
      "mocha": true
    },
    "parserOptions": {
      "ecmaVersion": 8
    },
    "extends": "eslint:recommended",
    "rules": {
      "no-console": "off"
    }
  },
  "gitHead": "ece35d7d86c87c04ff09e8604accae81cf36a0ce",
  "homepage": "https://github.com/nomiddlename/streamroller#readme",
  "keywords": [
    "stream",
    "rolling"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "csausdev",
      "email": "gareth.jones@sensis.com.au"
    }
  ],
  "name": "streamroller",
  "optionalDependencies": {},
  "readme": "streamroller\n============\n\nnode.js file streams that roll over when they reach a maximum size, or a date/time.\n\n        npm install streamroller\n\n## usage\n\n        var rollers = require('streamroller');\n        var stream = new rollers.RollingFileStream('myfile', 1024, 3);\n        stream.write(\"stuff\");\n        stream.end();\n\nThe streams behave the same as standard node.js streams, except that when certain conditions are met they will rename the current file to a backup and start writing to a new file.\n\n### new RollingFileStream(filename [, maxSize, numBackups, options])\n* `filename` (String)\n* `maxSize` - the size in bytes to trigger a rollover, if not provided this defaults to MAX_SAFE_INTEGER and the stream will not roll.\n* `numBackups` - the number of old files to keep\n* `options` - Object\n  * `encoding` - defaults to 'utf8'\n  * `mode` - defaults to 0644\n  * `flags` - defaults to 'a' (see [fs.open](https://nodejs.org/dist/latest-v8.x/docs/api/fs.html#fs_fs_open_path_flags_mode_callback) for more details)\n  * `compress` - (boolean) defaults to `false` - compress the backup files using gzip (files will have `.gz` extension).\n  * `keepFileExt` - (boolean) defaults to `false` - keep the file original extension. e.g.: `abc.log -> abc.1.log`.\n\nThis returns a `WritableStream`. When the current file being written to (given by `filename`) gets up to or larger than `maxSize`, then the current file will be renamed to `filename.1` and a new file will start being written to. Up to `numBackups` of old files are maintained, so if `numBackups` is 3 then there will be 4 files:\n<pre>\n     filename\n     filename.1\n     filename.2\n     filename.3\n</pre>\nWhen filename size >= maxSize then:\n<pre>\n     filename -> filename.1\n     filename.1 -> filename.2\n     filename.2 -> filename.3\n     filename.3 gets overwritten\n     filename is a new file\n</pre>\n\n### new DateRollingFileStream(filename, pattern, options)\n* `filename` (String)\n* `pattern` (String) - the date pattern to trigger rolling (see below)\n* `options` - Object\n\t* `encoding` - defaults to 'utf8'\n\t* `mode` defaults to 0644\n\t* `flags` defaults to 'a' (see [fs.open](https://nodejs.org/dist/latest-v8.x/docs/api/fs.html#fs_fs_open_path_flags_mode_callback) for more details)\n    * `compress` - (boolean) compress the backup files, defaults to false\n    * `keepFileExt` - (boolean) defaults to `false` - keep the file original extension. e.g.: `abc.log -> abc.2013-08-30.log`.\n\t* `alwaysIncludePattern` - (boolean) extend the initial file with the pattern, defaults to false\n  * `daysToKeep` - (integer) if this is greater than 0, then files older than `daysToKeep` days will be deleted during file rolling.\n\n\nThis returns a `WritableStream`. When the current time, formatted as `pattern`, changes then the current file will be renamed to `filename.formattedDate` where `formattedDate` is the result of processing the date through the pattern, and a new file will begin to be written. Streamroller uses [date-format](http://github.com/nomiddlename/date-format) to format dates, and the `pattern` should use the date-format format. e.g. with a `pattern` of `\".yyyy-MM-dd\"`, and assuming today is August 29, 2013 then writing to the stream today will just write to `filename`. At midnight (or more precisely, at the next file write after midnight), `filename` will be renamed to `filename.2013-08-29` and a new `filename` will be created. If `options.alwaysIncludePattern` is true, then the initial file will be `filename.2013-08-29` and no renaming will occur at midnight, but a new file will be written to with the name `filename.2013-08-30`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nomiddlename/streamroller.git"
  },
  "scripts": {
    "clean": "rm -rf node_modules/",
    "codecheck": "eslint 'src/**/*.js'",
    "commitmsg": "commitlint -e $GIT_PARAMS",
    "html-report": "nyc report --reporter=html",
    "prepublishOnly": "npm test",
    "pretest": "npm run codecheck",
    "test": "nyc --check-coverage --lines 100 --branches 100 --functions 100 mocha"
  },
  "version": "1.0.6"
}
