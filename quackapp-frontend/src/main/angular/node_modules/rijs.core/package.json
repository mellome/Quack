{
  "_args": [
    [
      {
        "raw": "rijs.core@*",
        "scope": null,
        "escapedName": "rijs.core",
        "name": "rijs.core",
        "rawSpec": "*",
        "spec": "*",
        "type": "range"
      },
      "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/popper"
    ]
  ],
  "_from": "rijs.core@*",
  "_id": "rijs.core@1.2.6",
  "_inCache": true,
  "_location": "/rijs.core",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/rijs.core_1.2.6_1524521522373_0.7295980874523271"
  },
  "_npmUser": {
    "name": "pemrouz",
    "email": "p3pedram@hotmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rijs.core@*",
    "scope": null,
    "escapedName": "rijs.core",
    "name": "rijs.core",
    "rawSpec": "*",
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/popper",
    "/rijs"
  ],
  "_resolved": "https://registry.npmjs.org/rijs.core/-/rijs.core-1.2.6.tgz",
  "_shasum": "638cd5a01baae10fccf57683172802adf37a7414",
  "_shrinkwrap": null,
  "_spec": "rijs.core@*",
  "_where": "/Users/mellome1992/LocalRepository/webtech2-blog/quackapp-frontend/src/main/angular/node_modules/popper",
  "author": {
    "name": "Pedram Emrouznejad",
    "url": "https://github.com/pemrouz"
  },
  "browser": {
    "colors": false
  },
  "bugs": {
    "url": "https://github.com/rijs/core/issues"
  },
  "dependencies": {
    "colors": "^1.1.0",
    "utilise": "^2.3.5"
  },
  "description": "Ripple Core",
  "devDependencies": {
    "rollup": "^0.58.1",
    "rollup-plugin-buble": "^0.16.0",
    "rollup-plugin-commonjs": "^8.2.6",
    "rollup-plugin-node-resolve": "^3.0.0",
    "tap": "^11.1.4",
    "uglify-es": "^3.3.10"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-bB/tay726eZomQe91ciIuSGM1zDNyIuOkKdg6jRvYOGR8N30x5qHoADVgCEJgpgqlsPjmuBq6qPsJ3Pw4Nv6Uw==",
    "shasum": "638cd5a01baae10fccf57683172802adf37a7414",
    "tarball": "https://registry.npmjs.org/rijs.core/-/rijs.core-1.2.6.tgz",
    "fileCount": 10,
    "unpackedSize": 51347,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3lozCRA9TVsSAnZWagAAIXsQAJ4PFTCt8Nt/tw4Z/Aam\nV7pcHibnYugTOCHsVlU2A/pY5K45STXup/zasmbsatUHrGBNCidcg9oVx4HJ\n6tij6LjFG7kXg7VpYkqj7kAfK+JyxaUn7hJekFnZytUWpjtAwsOWIdJtVyxr\n/mmJ2rWYi6seZwEZyP0s/uzNbol8RZYTmLieezZPeg1R8jridTxzdyeV2b9w\nypXCKTuz6pCPOMPx7uY3qbF2lnM9F8oEe40gvjeG5Fn0XEdbTBM/K8g0daY0\nAudpbUQNLzqnM4IM/3P8cJahdEfKUnzL2aSbvoLdeXKUQau40/2phBRxRvZy\nnExid3dR0csOaDJB3DZV4PBKkgx4jnskSmPkK+Z19wsD2yiwyxaSwlGil21Z\nk+nnHIMEjLTiA7us4ObwyxKV/GdYx8lFhsLOrEY0PROVenvWVUtUvSKRP61q\nIul+M1oex47I/dLOClia3DIaR6VWi1oAEAQmSLa7uSTTv1r2ixzWkxgW/cvx\nIsDSTgD488jmjN+0L+pT+UVCHQ2UAFBxWnLpW/DpSwSibgdlm8Py/Hwqg2/h\nUOcgAkTqbW/cc9PbIcJq62i44u7y46MlXF4H1g6MyYbLk0194jiDRb8cE4xy\nHAn83TPlqd1x5cn2rUUALhMluAmXuZbDVGR/QO6ajCSbgH8jY6rkaKMdqEqv\ngQYj\r\n=KEI2\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "2b27a96c519dcac6cbd5c41ab9bf509f262bc930",
  "homepage": "https://github.com/rijs/core#readme",
  "license": "pemrouz.mit-license.org",
  "main": "index",
  "maintainers": [
    {
      "name": "pemrouz",
      "email": "p3pedram@hotmail.com"
    }
  ],
  "name": "rijs.core",
  "optionalDependencies": {},
  "readme": "# Ripple | Core\r\n[![Coverage Status](https://coveralls.io/repos/rijs/core/badge.svg?branch=master&service=github)](https://coveralls.io/github/rijs/core?branch=master)\r\n[![Build Status](https://travis-ci.org/rijs/core.svg)](https://travis-ci.org/rijs/core)\r\n\r\n\r\nA simple extensible in-memory data structure of resources. \r\n\r\n```js\r\nvar ripple = core()\r\n\r\nripple(name, body) // setter\r\nripple(name)       // getter\r\n```\r\n\r\nYou can also use the method-chained API:\r\n\r\n```js\r\nripple                \r\n  .resource(name, body)\r\n  .resource(name, body)\r\n  ...\r\n```\r\n\r\nThe resources it registers are accesible under `ripple.resources`.\r\n\r\nA **canonical** resource is an object with the following shape and three properties:\r\n\r\n```js\r\n{ name: 'foo'\r\n, body: 'bar'\r\n, headers: { 'content-type': 'text/plain' }\r\n}\r\n```\r\n\r\nThat is, it can be uniquely identified (`name`), the resource itself (`body`) and some arbitrary metadata (`headers`). Core only deals with the `content-type` header, however other modules may add and interpret their own per-resource metadata.\r\n\r\nCore only comes with one _type_ (`text/plain`) out of the box, so will fail to register anything other than a string. This is to make it very extensible and future-proof, such that you could for example create other exotic types like `application/jsx`, `text/jade` or `data/immutable`.\r\n\r\nNote that you do not have to register a canonical resource, you will most likely use shortcuts in your application code (see [API](https://github.com/rijs/core#api) for more).\r\n\r\n```js\r\nripple('foo', 'bar')\r\n\r\n// will result in ripple.resources ===\r\n{\r\n  foo: { name: 'foo'\r\n       , body: 'bar'\r\n       , headers: { 'content-type': 'text/plain' }\r\n       }\r\n}\r\n```\r\n\r\n## Resource Interpretation\r\n\r\nWhen an content-type header is not explicitly given, core will loop through it's registered types and see if any of them understand this particular resource (by passing `{ name, body, headers }` to each type `check` function). If any of them do:\r\n\r\n* The `content-type` header will be set\r\n* The type `parse` function will be run on the resource\r\n* The resource will be stored internally\r\n* A [change event](https://github.com/rijs/core#--event) will be emitted\r\n\r\nYou'll need to extend `ripple.types` to tell it how to interpret other resources. Each type object should have the following:\r\n\r\n```js\r\n{ header: 'the content type you are registering'\r\n, check: function // necessary\r\n, parse: function // optional\r\n}\r\n```\r\n\r\nThe `parse` function is a chance to initialise the resource, set default headers, etc. Some examples: \r\n* `application/data` - [proxies change events](https://github.com/rijs/data/blob/master/src/index.js#L10-L21) so you can do per-resource change listeners `ripple('data').on('change, fn)`\r\n* `application/javascript` - turns a [function as a string into a real function](https://github.com/rijs/fn/blob/master/src/index.js#L9) (useful since streamed over WS).\r\n\r\nOther modules can also extend existing parse functions. For example, `sync` [extends every type parse function](https://github.com/rijs/sync/blob/master/src/index.js#L99-L113) to add the ability to define server/client transformation functions. \r\n\r\nSee other existing vanilla types for more examples: [Data](https://github.com/rijs/data), [Versioned Data](https://github.com/rijs/versioned), [Functions](https://github.com/rijs/fn), [HTML](https://github.com/rijs/html), [CSS](https://github.com/rijs/css).\r\n\r\n## Event\r\n\r\nThe core instance is [emitterified](https://github.com/utilise/utilise#--emitterify). Whenever a resource is registered, a change event will be emitted.\r\n\r\n```js\r\nripple.on('change', doSomething)\r\n```\r\n\r\n## API\r\n\r\n```js\r\nripple('name')                   // - returns the resource body if it exists\r\nripple('name', body)             // - creates & returns resource, with specified name and body\r\nripple('name', body, headers })  // - creates & returns resource, with specified name, body and headers\r\nripple({ name, body, headers })  // - creates & returns resource, with specified name, body and headers\r\nripple([ ... ])                  // - calls ripple on each item - registers an array of resources\r\nripple.resources                 // - returns raw resources\r\nripple.resource                  // - alias for ripple, returns ripple instead of resource for method chaining\r\nripple.register                  // - alias for ripple\r\nripple.on                        // - event listener for changes - all resources\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rijs/core.git"
  },
  "scripts": {
    "build": "npm run rollup && npm run minify && npm run gzip",
    "coverage": "tap *.test.js --coverage-report=lcov",
    "gzip": "gzip -c client.min.js > client.min.js.gz",
    "minify": "uglifyjs client.bundle.js -m -c keep_fargs=false > client.min.js",
    "postversion": "git push && git push --tags",
    "rollup": "rollup -c",
    "test": "tap *.test.js",
    "version": "npm run build && git add -A"
  },
  "version": "1.2.6"
}
